// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VientoProduct) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VientoProduct) encodeFields(e *jx.Encoder) {
	{
		if s.ProductID.Set {
			e.FieldStart("ProductID")
			s.ProductID.Encode(e)
		}
	}
	{
		if s.OfferID.Set {
			e.FieldStart("OfferID")
			s.OfferID.Encode(e)
		}
	}
	{
		if s.IsFBOVisible.Set {
			e.FieldStart("IsFBOVisible")
			s.IsFBOVisible.Encode(e)
		}
	}
	{
		if s.Archived.Set {
			e.FieldStart("Archived")
			s.Archived.Encode(e)
		}
	}
	{
		if s.IsFBSVisible.Set {
			e.FieldStart("IsFBSVisible")
			s.IsFBSVisible.Encode(e)
		}
	}
	{
		if s.IsDiscounted.Set {
			e.FieldStart("IsDiscounted")
			s.IsDiscounted.Encode(e)
		}
	}
	{
		if s.Barcode.Set {
			e.FieldStart("Barcode")
			s.Barcode.Encode(e)
		}
	}
	{
		if s.Barcodes != nil {
			e.FieldStart("Barcodes")
			e.ArrStart()
			for _, elem := range s.Barcodes {
				e.Str(elem)
			}
			e.ArrEnd()
		}
	}
	{
		if s.Price.Set {
			e.FieldStart("Price")
			s.Price.Encode(e)
		}
	}
}

var jsonFieldsNameOfVientoProduct = [9]string{
	0: "ProductID",
	1: "OfferID",
	2: "IsFBOVisible",
	3: "Archived",
	4: "IsFBSVisible",
	5: "IsDiscounted",
	6: "Barcode",
	7: "Barcodes",
	8: "Price",
}

// Decode decodes VientoProduct from json.
func (s *VientoProduct) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VientoProduct to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "ProductID":
			if err := func() error {
				s.ProductID.Reset()
				if err := s.ProductID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ProductID\"")
			}
		case "OfferID":
			if err := func() error {
				s.OfferID.Reset()
				if err := s.OfferID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"OfferID\"")
			}
		case "IsFBOVisible":
			if err := func() error {
				s.IsFBOVisible.Reset()
				if err := s.IsFBOVisible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IsFBOVisible\"")
			}
		case "Archived":
			if err := func() error {
				s.Archived.Reset()
				if err := s.Archived.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Archived\"")
			}
		case "IsFBSVisible":
			if err := func() error {
				s.IsFBSVisible.Reset()
				if err := s.IsFBSVisible.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IsFBSVisible\"")
			}
		case "IsDiscounted":
			if err := func() error {
				s.IsDiscounted.Reset()
				if err := s.IsDiscounted.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"IsDiscounted\"")
			}
		case "Barcode":
			if err := func() error {
				s.Barcode.Reset()
				if err := s.Barcode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Barcode\"")
			}
		case "Barcodes":
			if err := func() error {
				s.Barcodes = make([]string, 0)
				if err := d.Arr(func(d *jx.Decoder) error {
					var elem string
					v, err := d.Str()
					elem = string(v)
					if err != nil {
						return err
					}
					s.Barcodes = append(s.Barcodes, elem)
					return nil
				}); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Barcodes\"")
			}
		case "Price":
			if err := func() error {
				s.Price.Reset()
				if err := s.Price.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Price\"")
			}
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VientoProduct")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VientoProduct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VientoProduct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
